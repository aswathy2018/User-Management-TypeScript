<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User-Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">

    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        :root {
            --primary: #2D3250;
            --accent: #424769;
            --text: #333;
            --bg: #F6F6F6;
            --white: #ffffff;
            --border: #E8E8E8;
        }

        body {
            background: var(--bg);
            color: var(--text);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .overlay {
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.4);
            display: flex;
            align-items: center;
            justify-content: center;
            transition: .3s ease-out;
        }

        .popup-container {
            background: var(--white);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 460px;
            padding: 2rem;
            animation: slideUp .3s ease-out;
            transition: .3s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: .5rem;
            font-size: 1.5rem;
            font-weight: 600;
            color: var(--primary);
        }

        .logo-icon {
            width: 28px;
            height: 28px;
            color: var(--primary);
        }

        .close-icon {
            width: 24px;
            height: 24px;
            opacity: .6;
            cursor: pointer;
            transition: .3s;
        }

        .close-icon:hover {
            opacity: 1;
        }

        h1 {
            font-size: 1.8rem;
            margin-bottom: .5rem;
            color: var(--primary);
        }

        .subtitle {
            color: #666;
            margin-bottom: 2rem;
            font-size: .95rem;
        }

        .input-group {
            position: relative;
            margin-bottom: 1.2rem;
            transition: .2s ease-out;
        }

        .input-icon {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
            opacity: .5;
        }

        input {
            width: 100%;
            padding: .9rem 1rem .9rem 3rem;
            border: 1px solid var(--border);
            border-radius: 8px;
            background: var(--white);
            font-size: .95rem;
            transition: .3s;
        }

        input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(45, 50, 80, 0.1);
        }

        .remember-forgot {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.2rem;
            font-size: .9rem;
        }

        .remember {
            display: flex;
            align-items: center;
            gap: .5rem;
            cursor: pointer;
        }

        .remember input[type="checkbox"] {
            width: auto;
            margin: 0;
        }

        .forgot-link {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
        }

        .signup-btn {
            width: 100%;
            padding: .9rem;
            background: var(--primary);
            color: white;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: .3s;
        }

        .signup-btn:hover {
            background: var(--accent);
        }

        .divider {
            text-align: center;
            margin: 1.5rem 0;
            position: relative;
            font-size: .9rem;
        }

        .divider::before,
        .divider::after {
            content: '';
            position: absolute;
            top: 50%;
            width: 35%;
            height: 1px;
            background: var(--border);
        }

        .divider::before {
            left: 0;
        }

        .divider::after {
            right: 0;
        }

        .divider span {
            background: var(--white);
            padding: 0 1rem;
            color: #666;
        }

        .google-btn {
            width: 100%;
            padding: .9rem;
            background: var(--white);
            border: 1px solid var(--border);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: .5rem;
            font-size: .95rem;
            cursor: pointer;
            transition: .3s;
        }

        .google-btn:hover {
            background: var(--bg);
        }

        .google-btn img {
            width: 18px;
            height: 18px;
        }

        .login-link {
            text-align: center;
            margin-top: 1.5rem;
            color: #666;
            font-size: .9rem;
        }

        .login-link a {
            color: var(--primary);
            text-decoration: none;
            font-weight: 500;
        }

        .login-link a:hover {
            text-decoration: underline;
        }

        @media (max-width: 480px) {
            .popup-container {
                margin: 1rem;
                padding: 1.5rem;
            }
        }

        .message {
            padding: .8rem;
            border-radius: 6px;
            margin-bottom: 1rem;
            font-size: .9rem;
            text-align: center;
            animation: fadeIn .3s ease-out;
        }

        .message.error {
            background: #FEE2E2;
            color: #991B1B;
            border: 1px solid #FCA5A5;
        }

        .message.success {
            background: #DCFCE7;
            color: #166534;
            border: 1px solid #86EFAC;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .input-group.focused {
            transform: scale(1.02);
        }

        .form {
            display: none;
            opacity: 0;
            transform: translateX(20px);
            transition: .3s ease-out;
        }

        .form.active {
            display: block;
            opacity: 1;
            transform: translateX(0);
        }

        .switch-form {
            font-weight: 600;
        }

        .form-container {
            position: relative;
            min-height: 400px;
        }

        #nameError,
        #emailError,
        #passwordError,
        #confirmPasswordError {
            color: red;
            font-size: 12px;
            display: block;
            margin-top: 5px;
            margin-left: 5px;
            min-height: 18px;
        }
    </style>
</head>
<body>
    <div class="overlay">
        <div class="popup-container">
            <header>
                <div class="logo">
                    <img src="https://api.iconify.design/mdi:shaker-outline.svg" alt="CaIN Logo" class="logo-icon">
                    <span>Sign Up</span>
                </div>
                
            </header>
            <main>
                <div class="form-container">
                    <div id="registerForm" class="form active">
                        <p class="subtitle">Sign up to get started</p>
                        <form id="registerFormElement">
                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:account-outline.svg" alt="Name" class="input-icon">
                                <input type="text" id="name" placeholder="Your Name">
                            </div>
                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:email-outline.svg" alt="Email" class="input-icon">
                                <input type="email" id="registerEmail" placeholder="Your Email">
                            </div>
                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:lock-outline.svg" alt="Password" class="input-icon">
                                <input type="password" id="registerPassword" placeholder="Create Password">
                            </div>
                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:lock-check-outline.svg" alt="Confirm Password" class="input-icon">
                                <input type="password" id="confirmPassword" placeholder="Confirm Password">
                            </div>
                            <button type="submit" class="signup-btn">Create Account</button>
                            <p class="login-link">
                                Already have an account? <a href="/">Login</a>
                            </p>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>
    <script src="authPage.js"></script>

    <script>
    const form = document.getElementById('registerFormElement');
    const nameInput = document.getElementById('name');
    const emailInput = document.getElementById('registerEmail');
    const passwordInput = document.getElementById('registerPassword');
    const confirmPasswordInput = document.getElementById('confirmPassword');

    function createErrorElements() {
        const fields = [
            { input: nameInput, errorId: 'nameError' },
            { input: emailInput, errorId: 'emailError' },
            { input: passwordInput, errorId: 'passwordError' },
            { input: confirmPasswordInput, errorId: 'confirmPasswordError' }
        ];

        fields.forEach(field => {
            if (!document.getElementById(field.errorId)) {
                const errorSpan = document.createElement('span');
                errorSpan.id = field.errorId;
                errorSpan.style.color = 'red';
                errorSpan.style.fontSize = '12px';
                errorSpan.style.display = 'none';
                errorSpan.style.marginTop = '5px';
                errorSpan.style.marginLeft = '5px';
                field.input.parentElement.parentElement.insertBefore(errorSpan, field.input.parentElement.nextSibling);
            }
        });
    }

    createErrorElements();

    const nameError = document.getElementById('nameError');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');
    const confirmPasswordError = document.getElementById('confirmPasswordError');

    function validateName(name) {
        if (!name.trim()) {
            return 'Name is required';
        }
        if (name.trim().length === 0) {
            return 'Name cannot contain only spaces';
        }
        if (!/^[A-Za-z\s]+$/.test(name)) {
            return 'Name should contain only letters';
        }
        if (!/^[A-Z]/.test(name.trim())) {
            return 'Name must start with a capital letter';
        }
        if (/\s{2,}/.test(name)) {
            return 'Name cannot contain continuous spaces';
        }
        return '';
    }

    function validateEmail(email) {
        if (!email.trim()) {
            return 'Email is required';
        }
        if (email.trim().length === 0) {
            return 'Email cannot contain only spaces';
        }
        if (/^\d+$/.test(email)) {
            return 'Email cannot contain only numbers';
        }
        if (/^[^a-zA-Z0-9]+$/.test(email)) {
            return 'Email cannot contain only special characters';
        }
        const emailRegex = /^[a-z][a-z0-9]*@[a-z]+\.com$/;
        if (!emailRegex.test(email)) {
            return 'Invalid email format (e.g., aswathy123@gmail.com)';
        }
        return '';
    }

    function validatePassword(password) {
        if (!password) {
            return 'Password is required';
        }
        if (password.length < 4) {
            return 'Password must be at least 4 characters long';
        }
        if (/\s/.test(password)) {
            return 'Password cannot contain spaces';
        }
        if (!/[A-Z]/.test(password)) {
            return 'Password must contain at least one capital letter';
        }
        if (!/[0-9]/.test(password)) {
            return 'Password must contain at least one number';
        }
        if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
            return 'Password must contain at least one special character';
        }
        return '';
    }

    function validateConfirmPassword(password, confirmPassword) {
        if (!confirmPassword) {
            return 'Please confirm your password';
        }
        if (password !== confirmPassword) {
            return 'Passwords do not match';
        }
        return '';
    }

    [nameInput, emailInput, passwordInput, confirmPasswordInput].forEach(input => {
        input.addEventListener('blur', function () {
            const errorId = this.id + 'Error';
            const errorElement = document.getElementById(errorId);
            const validator = {
                name: validateName,
                registerEmail: validateEmail,
                registerPassword: validatePassword,
                confirmPassword: () => validateConfirmPassword(passwordInput.value, confirmPasswordInput.value)
            }[this.id];
            const error = validator(this.value);
            errorElement.textContent = error;
            errorElement.style.display = error ? 'block' : 'none';
        });

        input.addEventListener('input', function () {
            const errorId = this.id + 'Error';
            const errorElement = document.getElementById(errorId);
            if (errorElement.textContent) {
                const validator = {
                    name: validateName,
                    registerEmail: validateEmail,
                    registerPassword: validatePassword,
                    confirmPassword: () => validateConfirmPassword(passwordInput.value, confirmPasswordInput.value)
                }[this.id];
                const error = validator(this.value);
                errorElement.textContent = error;
                errorElement.style.display = error ? 'block' : 'none';
            }
        });
    });

    form.addEventListener('submit', function (e) {
        e.preventDefault();

        const nameErr = validateName(nameInput.value);
        const emailErr = validateEmail(emailInput.value);
        const passwordErr = validatePassword(passwordInput.value);
        const confirmPasswordErr = validateConfirmPassword(passwordInput.value, confirmPasswordInput.value);

        nameError.textContent = nameErr;
        emailError.textContent = emailErr;
        passwordError.textContent = passwordErr;
        confirmPasswordError.textContent = confirmPasswordErr;

        nameError.style.display = nameErr ? 'block' : 'none';
        emailError.style.display = emailErr ? 'block' : 'none';
        passwordError.style.display = passwordErr ? 'block' : 'none';
        confirmPasswordError.style.display = confirmPasswordErr ? 'block' : 'none';

        if (!nameErr && !emailErr && !passwordErr && !confirmPasswordErr) {
            const formData = {
                name: nameInput.value.trim(),
                email: emailInput.value.trim(),
                password: passwordInput.value
            };

            fetch('/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirect || '/home';
                    } else {

                        if (data.message.includes('email is already registered')) {
                            emailError.textContent = data.message;
                            emailError.style.display = 'block';
                        } else if (data.message.includes('All fields are required')) {
                            nameError.textContent = data.message;
                            emailError.textContent = data.message;
                            passwordError.textContent = data.message;
                            nameError.style.display = 'block';
                            emailError.style.display = 'block';
                            passwordError.style.display = 'block';
                        } else {
                            alert(data.message || 'Registration failed. Please try again.');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error during signup:', error);
                    alert('An error occurred during signup. Please try again.');
                });
        }
    });

    window.addEventListener('load', async () => {
        try {
            const response = await fetch('/check-auth', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const data = await response.json();
            if (data.isAuthenticated) {
                window.location.href = '/home';
            }
        } catch (error) {
            console.error('Error checking auth status:', error);
        }
    });
</script>

</body>
</html>