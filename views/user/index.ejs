<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User-Management</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet">
<style>
    * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Poppins', sans-serif;
}

:root {
    --primary: #2D3250;
    --accent: #424769;
    --text: #333;
    --bg: #F6F6F6;
    --white: #ffffff;
    --border: #E8E8E8;
}

body {
    background: var(--bg);
    color: var(--text);
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
}

.overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.4);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: .3s ease-out;
}

.popup-container {
    background: var(--white);
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 460px;
    padding: 2rem;
    animation: slideUp .3s ease-out;
    transition: .3s ease-out;
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
}

.logo {
    display: flex;
    align-items: center;
    gap: .5rem;
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--primary);
}

.logo-icon {
    width: 28px;
    height: 28px;
    color: var(--primary);
}

.close-icon {
    width: 24px;
    height: 24px;
    opacity: .6;
    cursor: pointer;
    transition: .3s;
}

.close-icon:hover {
    opacity: 1;
}

h1 {
    font-size: 1.8rem;
    margin-bottom: .5rem;
    color: var(--primary);
}

.subtitle {
    color: #666;
    margin-bottom: 2rem;
    font-size: .95rem;
}

.input-group {
    position: relative;
    margin-bottom: 1.2rem;
    transition: .2s ease-out;
}

.input-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 20px;
    height: 20px;
    opacity: .5;
}

input {
    width: 100%;
    padding: .9rem 1rem .9rem 3rem;
    border: 1px solid var(--border);
    border-radius: 8px;
    background: var(--white);
    font-size: .95rem;
    transition: .3s;
}

input:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(45, 50, 80, 0.1);
}

.remember-forgot {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.2rem;
    font-size: .9rem;
}

.remember {
    display: flex;
    align-items: center;
    gap: .5rem;
    cursor: pointer;
}

.remember input[type="checkbox"] {
    width: auto;
    margin: 0;
}

.forgot-link {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
}

.signup-btn {
    width: 100%;
    padding: .9rem;
    background: var(--primary);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: .3s;
}

.signup-btn:hover {
    background: var(--accent);
}

.divider {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
    font-size: .9rem;
}

.divider::before,
.divider::after {
    content: '';
    position: absolute;
    top: 50%;
    width: 35%;
    height: 1px;
    background: var(--border);
}

.divider::before {
    left: 0;
}

.divider::after {
    right: 0;
}

.divider span {
    background: var(--white);
    padding: 0 1rem;
    color: #666;
}

.google-btn {
    width: 100%;
    padding: .9rem;
    background: var(--white);
    border: 1px solid var(--border);
    border-radius: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: .5rem;
    font-size: .95rem;
    cursor: pointer;
    transition: .3s;
}

.google-btn:hover {
    background: var(--bg);
}

.google-btn img {
    width: 18px;
    height: 18px;
}

.login-link {
    text-align: center;
    margin-top: 1.5rem;
    color: #666;
    font-size: .9rem;
}

.login-link a {
    color: var(--primary);
    text-decoration: none;
    font-weight: 500;
}

.login-link a:hover {
    text-decoration: underline;
}

@media (max-width: 480px) {
    .popup-container {
        margin: 1rem;
        padding: 1.5rem;
    }
}

.message {
    padding: .8rem;
    border-radius: 6px;
    margin-bottom: 1rem;
    font-size: .9rem;
    text-align: center;
    animation: fadeIn .3s ease-out;
}

.message.error {
    background: #FEE2E2;
    color: #991B1B;
    border: 1px solid #FCA5A5;
}

.message.success {
    background: #DCFCE7;
    color: #166534;
    border: 1px solid #86EFAC;
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.input-group.focused {
    transform: scale(1.02);
}

.form {
    display: none;
    opacity: 0;
    transform: translateX(20px);
    transition: .3s ease-out;
}

.form.active {
    display: block;
    opacity: 1;
    transform: translateX(0);
}

.switch-form {
    font-weight: 600;
}

.form-container {
    position: relative;
    min-height: 400px;
}

.error-message {
    color: red;
    font-size: 12px;
    margin-top: 5px;
    display: none;
    margin-left: 5px;
}

</style>
</head>
<body>
    <div class="overlay">
        <div class="popup-container">
            <header>
                <div class="logo">
                    <img src="https://api.iconify.design/mdi:shaker-outline.svg" alt="CaIN Logo" class="logo-icon">
                    <span>Login</span>
                </div>
            </header>

            <main>
                <div class="form-container">
                    <div id="loginForm" class="form active">
                        <h1>Welcome Back</h1>
                        <p class="subtitle">Login to continue to your account</p>

                        <form id="loginFormElement">
                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:email-outline.svg" alt="Email" class="input-icon">
                                <input type="email" id="email" placeholder="Your Email">
                                <span id="emailError" class="error-message" style="display: none;"></span>
                            </div>

                            <div class="input-group">
                                <img src="https://api.iconify.design/mdi:lock-outline.svg" alt="Password" class="input-icon">
                                <input type="password" id="password" placeholder="Your Password">
                                <span id="passwordError" class="error-message" style="display: none;"></span>
                            </div>

                            <button type="submit" class="signup-btn">Login</button>

                            <p class="login-link">
                                Don't have an account? <a href="/signup" class="switch-form" data-form="registerForm">Sign Up</a>
                            </p>
                            <div id="generalError" style="color: red; font-size: 12px; display: none; margin-bottom: 10px;"></div>
                        </form>
                    </div>
                </div>
            </main>
        </div>
    </div>
    <script src="authPage.js"></script>
</body>

<!-- <script>
    const form = document.getElementById('loginFormElement');
        const emailInput = document.getElementById('email');
        const passwordInput = document.getElementById('password');
        const emailError = document.getElementById('emailError');
        const passwordError = document.getElementById('passwordError');

        // Validation functions (reused from signup)
        function validateEmail(email) {
            if (!email.trim()) {
                return 'Email is required';
            }
            if (email.trim().length === 0) {
                return 'Email cannot contain only spaces';
            }
            if (/^\d+$/.test(email)) {
                return 'Email cannot contain only numbers';
            }
            if (/^[^a-zA-Z0-9]+$/.test(email)) {
                return 'Email cannot contain only special characters';
            }
            const emailRegex = /^[a-z][a-z0-9]*@[a-z]+\.com$/;
            if (!emailRegex.test(email)) {
                return 'Invalid email format (e.g., aswathy123@gmail.com)';
            }
            return '';
        }

        function validatePassword(password) {
            if (!password) {
                return 'Password is required';
            }
            if (password.length < 4) {
                return 'Password must be at least 4 characters long';
            }
            if (/\s/.test(password)) {
                return 'Password cannot contain spaces';
            }
            if (!/[A-Z]/.test(password)) {
                return 'Password must contain at least one capital letter';
            }
            if (!/[0-9]/.test(password)) {
                return 'Password must contain at least one number';
            }
            if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
                return 'Password must contain at least one special character';
            }
            return '';
        }

        // Real-time validation
        [emailInput, passwordInput].forEach(input => {
            input.addEventListener('blur', function () {
                const errorId = this.id + 'Error';
                const errorElement = document.getElementById(errorId);
                const validator = {
                    email: validateEmail,
                    password: validatePassword
                }[this.id];
                const error = validator(this.value);
                errorElement.textContent = error;
                errorElement.style.display = error ? 'block' : 'none';
            });

            input.addEventListener('input', function () {
                const errorId = this.id + 'Error';
                const errorElement = document.getElementById(errorId);
                if (errorElement.textContent) {
                    const validator = {
                        email: validateEmail,
                        password: validatePassword
                    }[this.id];
                    const error = validator(this.value);
                    errorElement.textContent = error;
                    errorElement.style.display = error ? 'block' : 'none';
                }
            });
        });

        // Form submission
        form.addEventListener('submit', function (e) {
            e.preventDefault();

            // Validate all fields
            const emailErr = validateEmail(emailInput.value);
            const passwordErr = validatePassword(passwordInput.value);

            // Display errors
            emailError.textContent = emailErr;
            passwordError.textContent = passwordErr;
            emailError.style.display = emailErr ? 'block' : 'none';
            passwordError.style.display = passwordErr ? 'block' : 'none';

            // If no errors, submit the form
            if (!emailErr && !passwordErr) {
                const formData = {
                    email: emailInput.value.trim(),
                    password: passwordInput.value
                };

                fetch('/login', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            window.location.href = '/home'; // Redirect to home page on success
                        } else {
                            if (data.message === 'Email not found') {
                                emailError.textContent = data.message;
                                emailError.style.display = 'block';
                            } else if (data.message === 'This user is currently blocked') {
                                emailError.textContent = data.message;
                                emailError.style.display = 'block';
                            } else if (data.message === 'Incorrect password') {
                                passwordError.textContent = data.message;
                                passwordError.style.display = 'block';
                            } else {
                                alert(data.message || 'Login failed. Please try again.');
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred. Please try again.');
                    });
            }
        });

        window.addEventListener('load', async () => {
        try {
            const response = await fetch('/check-auth', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const data = await response.json();
            if (data.isAuthenticated) {
                window.location.href = '/home';
            }
        } catch (error) {
            console.error('Error checking auth status:', error);
        }
    });
</script> -->

<script>
    const form = document.getElementById('loginFormElement');
    const emailInput = document.getElementById('email');
    const passwordInput = document.getElementById('password');
    const emailError = document.getElementById('emailError');
    const passwordError = document.getElementById('passwordError');

    function validateEmail(email) {
        if (!email.trim()) {
            return 'Email is required';
        }
        if (email.trim().length === 0) {
            return 'Email cannot contain only spaces';
        }
        if (/^\d+$/.test(email)) {
            return 'Email cannot contain only numbers';
        }
        if (/^[^a-zA-Z0-9]+$/.test(email)) {
            return 'Email cannot contain only special characters';
        }
        const emailRegex = /^[a-z][a-z0-9]*@[a-z]+\.com$/;
        if (!emailRegex.test(email)) {
            return 'Invalid email format (e.g., aswathy123@gmail.com)';
        }
        return '';
    }

    function validatePassword(password) {
        if (!password) {
            return 'Password is required';
        }
        if (password.length < 4) {
            return 'Password must be at least 4 characters long';
        }
        if (/\s/.test(password)) {
            return 'Password cannot contain spaces';
        }
        if (!/[A-Z]/.test(password)) {
            return 'Password must contain at least one capital letter';
        }
        if (!/[0-9]/.test(password)) {
            return 'Password must contain at least one number';
        }
        if (!/[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password)) {
            return 'Password must contain at least one special character';
        }
        return '';
    }

    [emailInput, passwordInput].forEach(input => {
        input.addEventListener('blur', function () {
            const errorId = this.id + 'Error';
            const errorElement = document.getElementById(errorId);
            const validator = {
                email: validateEmail,
                password: validatePassword
            }[this.id];
            const error = validator(this.value);
            errorElement.textContent = error;
            errorElement.style.display = error ? 'block' : 'none';
        });

        input.addEventListener('input', function () {
            const errorId = this.id + 'Error';
            const errorElement = document.getElementById(errorId);
            if (errorElement.textContent) {
                const validator = {
                    email: validateEmail,
                    password: validatePassword
                }[this.id];
                const error = validator(this.value);
                errorElement.textContent = error;
                errorElement.style.display = error ? 'block' : 'none';
            }
        });
    });
    form.addEventListener('submit', function (e) {
        e.preventDefault();

        const emailErr = validateEmail(emailInput.value);
        const passwordErr = validatePassword(passwordInput.value);

        emailError.textContent = emailErr;
        passwordError.textContent = passwordErr;
        emailError.style.display = emailErr ? 'block' : 'none';
        passwordError.style.display = passwordErr ? 'block' : 'none';

        if (!emailErr && !passwordErr) {
            const formData = {
                email: emailInput.value.trim(),
                password: passwordInput.value
            };

            fetch('/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.href = data.redirect || '/home';
                    } else {
                        if (data.message === 'Email not found' || data.message === 'This user is currently blocked') {
                            emailError.textContent = data.message;
                            emailError.style.display = 'block';
                        } else if (data.message === 'Incorrect password') {
                            passwordError.textContent = data.message;
                            passwordError.style.display = 'block';
                        } else {
                            alert(data.message || 'Login failed. Please try again.');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error during login:', error);
                    alert('An error occurred during login. Please try again.');
                });
        }
    });

    window.addEventListener('load', async () => {
        try {
            const response = await fetch('/check-auth', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const data = await response.json();
            if (data.isAuthenticated) {
                window.location.href = '/home';
            }
        } catch (error) {
            console.error('Error checking auth status:', error);
        }
    });
</script>

</html>
